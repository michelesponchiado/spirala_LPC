/******************************************************************************/
   Program: CANopenNode
   Library for communication of different microcontrollers via CANopen protocol.

   Copyright (C) 2004-2008 Janez Paternoster

   License: GNU Lesser General Public License (LGPL).

   <http://canopennode.sourceforge.net>


/******************************************************************************/
   Topic: Standards

   CANopen library according to CiA Draft Standard 301 (Version 4.2).
   See <http://www.can-cia.de/>.


/******************************************************************************/
   Topic: Features

   Library is written on object-oriented way. Code for each CANopen object is
   split into two files: *.c and *.h. There are no global variables necessary.
   In general, application first defines object. In the Communication reset
   section it initializes it with the _init function. In the endless loop then
   calls the _process function.

   Since library is object oriented, multiple configurations are possible with
   processors with two CAN interfaces, for example: two independent CANopen
   devices on one processor; one CANopen device, but some fast PDOs are on second
   CAN interface.
   
   Source files, ordered in the following order:
      - <CO_driver.h> describes CAN module object (microcontroller specific).
      - <CO_OD.h> describes object dictionary and all variables inside it.
        Variables are structured into three memory blocks, so different non-volatile
        strategies are possible for each block. See <CO_SDO.h> for more information.
        This file is not a part of the stack, it belongs to specific project.
        Files are automatically generated by 'Object Dictionary editor', which is part 
        of CANopenNode project.
      - <CO_SDO.h> describes CANopen SDO server object (SDO slave). Expedited
        and segmented transfers are implemented.
      - <CO_Emergency.h> describes CANopen Emergency object and error control.
        All stack errors are reported here. Application can also report its own errors.
      - <CO_NMT_Heartbeat.h> describes CANopen NMT and Heartbeat producer object.
      - <CO_SYNC.h> describes CANopen SYNC object.
      - <CO_PDO.h> describes CANopen Process Data Object. Dynamic PDO mapping
        has granularity of one byte. PDO transmission can be triggered by:
        event timer, selective change of state with inhibit timer, SYNC object.
      - <CO_HBconsumer.h> describes CANopen Heartbeat consumer object.
      - <CO_SDOmaster.h> describes CANopen SDO client object (SDO master). Expedited
        and segmented transfers are implemented.
